{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\react\\\\tenzies\\\\tenzies\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(allNewDice());\n  const [tenzies, setTenzies] = React.useState(false);\n  React.useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld);\n    const firstValue = dice[0].value;\n    const allSameValue = dice.every(die => die.value === firstValue);\n\n    if (allHeld && allSameValue) {\n      setTenzies(true);\n    }\n  }, [dice]);\n\n  function generateNewDie() {\n    return {\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    };\n  }\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push(generateNewDie());\n    }\n\n    return newDice;\n  }\n  /**\r\n   * Challenge: Allow the user to play a new game when the\r\n   * button is clicked and they've already won\r\n   */\n\n\n  function rollDice() {\n    setDice(oldDice => oldDice.map(die => {\n      return die.isHeld ? die : generateNewDie();\n    }));\n\n    if (tenzies) {\n      setTenzies(false);\n      setDice(allNewDice());\n    }\n  }\n\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    holdDice: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [tenzies && /*#__PURE__*/_jsxDEV(Confetti, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tenzies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: tenzies ? \"New Game\" : \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"mBhM4pmDk1UgsaV8K35tBPcmDjA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Die","nanoid","Confetti","App","dice","setDice","useState","allNewDice","tenzies","setTenzies","useEffect","allHeld","every","die","isHeld","firstValue","value","allSameValue","generateNewDie","Math","ceil","random","id","newDice","i","push","rollDice","oldDice","map","holdDice","diceElements"],"sources":["D:/projects/react/tenzies/tenzies/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport Die from \"./Die\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Confetti from \"react-confetti\";\r\n\r\nexport default function App() {\r\n  const [dice, setDice] = React.useState(allNewDice());\r\n  const [tenzies, setTenzies] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const allHeld = dice.every((die) => die.isHeld);\r\n    const firstValue = dice[0].value;\r\n    const allSameValue = dice.every((die) => die.value === firstValue);\r\n    if (allHeld && allSameValue) {\r\n      setTenzies(true);\r\n    }\r\n  }, [dice]);\r\n\r\n  function generateNewDie() {\r\n    return {\r\n      value: Math.ceil(Math.random() * 6),\r\n      isHeld: false,\r\n      id: nanoid(),\r\n    };\r\n  }\r\n\r\n  function allNewDice() {\r\n    const newDice = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      newDice.push(generateNewDie());\r\n    }\r\n    return newDice;\r\n  }\r\n\r\n  /**\r\n   * Challenge: Allow the user to play a new game when the\r\n   * button is clicked and they've already won\r\n   */\r\n\r\n  function rollDice() {\r\n    setDice((oldDice) =>\r\n      oldDice.map((die) => {\r\n        return die.isHeld ? die : generateNewDie();\r\n      })\r\n    );\r\n\r\n    if (tenzies) {\r\n      setTenzies(false);\r\n      setDice(allNewDice());\r\n    }\r\n  }\r\n\r\n  function holdDice(id) {\r\n    setDice((oldDice) =>\r\n      oldDice.map((die) => {\r\n        return die.id === id ? { ...die, isHeld: !die.isHeld } : die;\r\n      })\r\n    );\r\n  }\r\n\r\n  const diceElements = dice.map((die) => (\r\n    <Die\r\n      key={die.id}\r\n      value={die.value}\r\n      isHeld={die.isHeld}\r\n      holdDice={() => holdDice(die.id)}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <main>\r\n      {tenzies && <Confetti />}\r\n      <h1 className=\"title\">Tenzies</h1>\r\n      <p className=\"instructions\">\r\n        Roll until all dice are the same. Click each die to freeze it at its\r\n        current value between rolls.\r\n      </p>\r\n      <div className=\"dice-container\">{diceElements}</div>\r\n      <button className=\"roll-dice\" onClick={rollDice}>\r\n        {tenzies ? \"New Game\" : \"Roll\"}\r\n      </button>\r\n    </main>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}